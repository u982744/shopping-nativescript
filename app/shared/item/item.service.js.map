{"version":3,"file":"item.service.js","sourceRoot":"","sources":["item.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Http, Headers} from \"@angular/http\";\nimport {Config} from \"../config\";\nimport {Item} from \"./item\";\nimport {Observable} from \"rxjs/Rx\";\nimport \"rxjs/add/operator/map\";\n\n@Injectable()\nexport class ItemService {\n  constructor(private _http: Http) {}\n\n  load(listId: string) {\n    return this._http.get(\n      Config.apiUrl + \"list/\" + listId + \"/item\"\n    )\n    .map(res => res.json())\n    .map(data => {\n      let itemList = [];\n      data.result.forEach((item) => {\n        itemList.push(new Item(item._id, item.name, item.done));\n      });\n      return {name: data.name, items: itemList};\n    })\n    .catch(this.handleErrors);\n  }\n\n  add(name: string, listId: string) {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n\n    //console.log(\"add...\", name, listId);\n\n    return this._http.post(\n      Config.apiUrl + \"list/\" + listId + \"/item\",\n      JSON.stringify({\n        name: name\n      }),\n      { headers: headers }\n    )\n    .map(res => res.json())\n    .map(data => {\n      //console.log(\"add map\", data.id, name);\n      return new Item(data.id, name, false);\n    })\n    .catch(this.handleErrors);\n  }\n\n  done(id: string, listId: string, done: boolean) {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n\n    return this._http.put(\n      Config.apiUrl + \"list/\" + listId + \"/item/\" + id,\n      JSON.stringify({\n        done: done\n      }),\n      { headers: headers }\n    )\n    .map(res => res.json())\n    .catch(this.handleErrors);\n  }\n\n  delete(id: string, listId: string) {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n\n    return this._http.delete(\n      Config.apiUrl + \"list/\" + listId + \"/item/\" + id,\n      { headers: headers }\n    )\n    .map(res => res.json())\n    .catch(this.handleErrors);\n  }\n\n  handleErrors(error) {\n    //console.log(JSON.stringify(error.json()));\n    return Observable.throw(error);\n  }\n}"]}