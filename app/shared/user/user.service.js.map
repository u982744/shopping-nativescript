{"version":3,"file":"user.service.js","sourceRoot":"","sources":["user.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAAsC,eAAe,CAAC,CAAA;AAEtD,uBAAqB,WAAW,CAAC,CAAA;AACjC,mBAAyB,SAAS,CAAC,CAAA;AACnC,QAAO,sBAAsB,CAAC,CAAA;AAC9B,QAAO,uBAAuB,CAAC,CAAA;AAG/B;IACE,qBAAoB,KAAW;QAAX,UAAK,GAAL,KAAK,CAAM;IAAG,CAAC;IAEnC,8BAAQ,GAAR,UAAS,IAAU;QACjB,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CACpB,eAAM,CAAC,MAAM,GAAG,QAAQ,EACxB,IAAI,CAAC,SAAS,CAAC;YACb,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC,EACF,EAAE,OAAO,EAAE,OAAO,EAAE,CACrB;aACA,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5B,CAAC;IAED,2BAAK,GAAL,UAAM,IAAU;QACd,2CAA2C;QAC3C,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAClB,eAAM,CAAC,MAAM,GAAG,OAAO,EACvB,IAAI,CAAC,SAAS,CAAC;YACb,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC,EACF,EAAE,OAAO,EAAE,OAAO,EAAE,CACvB;aACA,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,EAAE,CAAC,UAAA,IAAI;YACN,4BAA4B;YAC5B,eAAM,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;YACxB,eAAM,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;YACpC,eAAM,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;QAC3B,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5B,CAAC;IAED,kCAAY,GAAZ,UAAa,KAAe;QAC1B,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IA5CH;QAAC,iBAAU,EAAE;;mBAAA;IA6Cb,kBAAC;AAAD,CAAC,AA5CD,IA4CC;AA5CY,mBAAW,cA4CvB,CAAA","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Http, Headers, Response} from \"@angular/http\";\nimport {User} from \"./user\";\nimport {Config} from \"../config\";\nimport {Observable} from \"rxjs/Rx\";\nimport \"rxjs/add/operator/do\";\nimport \"rxjs/add/operator/map\";\n\n@Injectable()\nexport class UserService {\n  constructor(private _http: Http) {}\n\n  register(user: User) {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n\n    return this._http.post(\n      Config.apiUrl + \"signup\",\n      JSON.stringify({\n        email: user.email,\n        password: user.password\n      }),\n      { headers: headers }\n    )\n    .catch(this.handleErrors);\n  }\n\n  login(user: User) {\n    //console.log(\"login service do login...\");\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n\n    return this._http.post(\n        Config.apiUrl + \"login\",\n        JSON.stringify({\n          email: user.email,\n          password: user.password\n        }),\n        { headers: headers }\n    )\n    .map(response => response.json())\n    .do(data => {\n      //console.log(\"data\", data);\n      Config.token = data._id;\n      Config.userEmail = data.local.email;\n      Config.userId = data._id;\n    })\n    .catch(this.handleErrors);\n  }\n\n  handleErrors(error: Response) {\n    return Observable.throw(error);\n  }\n}"]}